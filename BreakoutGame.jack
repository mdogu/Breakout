/**
 * Represents a Breakout game.
 */
class BreakoutGame {

    field Ball ball;
    field Paddle paddle;
    field int columnCount, rowCount, bricksCount, brokenBricksCount;
    field Array bricks;
    field int score, lives, award, penalty;
    field boolean exit;

    /** Constructs a new Breakout Game */
    constructor BreakoutGame new() {
        do Screen.clearScreen();
        let ball = Ball.new(252, 222, 1, -1, 3);
        let paddle = Paddle.new(230, 229, 50, 7, 3);
        let columnCount = 5;
        let rowCount = 3;
        let bricksCount = columnCount * rowCount;
        let brokenBricksCount = 0;
        do createBricks();
        do drawInformationBoard();
        do updateScore(0);
        do updateLives(3);
        let award = 10;
        let penalty = 20;
        let exit = false;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        var int i;
        var Brick brick;
        do ball.dispose();
        do paddle.dispose();
        let i = 0;
        while (i < bricksCount) {
            let brick = bricks[i];
            do brick.dispose();
            let i = i + 1;
        }
        do bricks.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Draws bottom separator and Score/Lives labels */
    method void drawInformationBoard() {
        do Screen.drawRectangle(0, 238, 511, 240);
	    do Output.moveCursor(22,0);
	    do Output.printString("Score:");
        do Output.moveCursor(22,56);
	    do Output.printString("Lives:");
        return;
    }

    /** Updates score */
    method void updateScore(int newScore) {
        let score = newScore;
        do Output.moveCursor(22,7);
        do Output.printString("    "); // To clear leftovers.
        do Output.moveCursor(22,7);
        do Output.printInt(newScore);
        return;
    }

    /** Updates remaining lives */
    method void updateLives(int newLives) {
        let lives = newLives;
        do Output.moveCursor(22,63);
        do Output.printInt(newLives);
        return;
    }

    /** Paddle missed */
    method void missed() {
        do updateLives(lives - 1);
        do updateScore(score - penalty);
        if (lives > 0) {
            do ball.hide();
            do paddle.hide();
            do ball.setX(252);
            do ball.setY(222);
            do ball.setDx(1);
            do ball.setDy(-1);
            do paddle.setX(230);
            do Sys.wait(1000);
            do paddle.show();
            do ball.show();
        } else {
            do Output.moveCursor(22,27);
            do Output.printString("GAME OVER");
            do Sys.wait(100);
            let exit = true;
        }
        return;
    }

    /** Creates bricks */
    method void createBricks() {
        var int i;
        var int row;
        var int column;
        var int x;
        var int y;
        let bricks = Array.new(bricksCount);
        let i = 0;
        let row = 0;
        while (row < rowCount) {
            let column = 0;
            while (column < columnCount) {
                let x = 41 + (column * 89);
                let y = 25 + (row * 35);
                let bricks[i] = Brick.new(x, y, 74, 20); // TODO: Adjust size and location
                let i = i + 1;
                let column = column + 1;
            }
            let row = row + 1;
        }
        return;
    }

    /** Breaks a brick */
    method void breakBrick() {
        do updateScore(score + award);
        let brokenBricksCount = brokenBricksCount + 1;
        if (brokenBricksCount = bricksCount) {
            do Output.moveCursor(22,24);
            do Output.printString("CONGRATULATIONS");
            do Sys.wait(100);
            let exit = true;
        }
        return;
    }

    /** Starts the game and handles the input from user. */
    method void run() {
        var char key;  // the key currently pressed by the user
        while (~exit) {
            let key = Keyboard.keyPressed();
            if (key = 81)  { let exit = true; }        // q key
            if (key = 130) { do movePaddleLeft(); }    // left arrow
            if (key = 132) { do movePaddleRight(); }   // right arrow
            do moveBall();
            do Sys.wait(5);
        }
        return;
    }

    method void movePaddleRight() {
        if ((paddle.getX() + paddle.getWidth() + paddle.getDx()) < 512) {
            do paddle.moveRight();
        }
        return;
    }

    method void movePaddleLeft() {
        if ((paddle.getX() - paddle.getDx()) > 0) {
            do paddle.moveLeft();
        }
        return;
    }

    method void moveBall() {
        var int currentLeftEdge;
        var int currentRightEdge;
        var int currentTopEdge;
        var int currentBottomEdge;
        var int nextLeftEdge;
        var int nextRightEdge;
        var int nextTopEdge;
        var int nextBottomEdge;
        var boolean onPaddle;
        var int inverseDx;
        var int inverseDy;
        var int i;
        var Brick brick;
        var boolean break;

        let currentLeftEdge = ball.getX() - ball.getRadius();
        let currentRightEdge = ball.getX() + ball.getRadius();
        let currentTopEdge = ball.getY() - ball.getRadius();
        let currentBottomEdge = ball.getY() + ball.getRadius();
        let nextLeftEdge = ball.getX() + ball.getDx() - ball.getRadius();
        let nextRightEdge = ball.getX() + ball.getDx() + ball.getRadius();
        let nextTopEdge = ball.getY() + ball.getDy() - ball.getRadius();
        let nextBottomEdge = ball.getY() + ball.getDy() + ball.getRadius();
        let onPaddle = (ball.getX() > paddle.getX()) & (ball.getX() < (paddle.getX() + paddle.getWidth()));
        let inverseDx = -ball.getDx();
        let inverseDy = -ball.getDy();
        
        if (nextRightEdge > 511) {
            do ball.setDx(inverseDx);
        } else {
            if (nextLeftEdge < 0) {
                do ball.setDx(inverseDx);
            }
        } 
        
        if (nextTopEdge < 0) {
            do ball.setDy(inverseDy);
        } else {
            if (onPaddle & (nextBottomEdge = paddle.getY())) {
                do ball.setDy(inverseDy);
            } else {
                if (nextBottomEdge > 237) {
                    do missed();
                }
            }
        }

        let i = 0;
        let break = false;
        while ((i < bricksCount) & (~break)) {
            let brick = bricks[i];
            if (brick.isVisible()) {
                if (ball.getDx() > 0) {
                    if (ball.getDy() > 0) {
                        if ((nextRightEdge > brick.getX()) & (nextRightEdge < (brick.getX() + brick.getWidth())) & (nextBottomEdge > brick.getY()) & (nextBottomEdge < (brick.getY() + brick.getHeight()))) {
                            if (currentRightEdge = brick.getX()) {
                                do ball.setDx(inverseDx);
                            }
                            if (currentBottomEdge = brick.getY()) {
                                do ball.setDy(inverseDy);
                            }
                            do brick.hide();
                            do brick.setVisible(false);
                            let break = true;
                            do breakBrick();
                        }
                    } else {
                        if ((nextRightEdge > brick.getX()) & (nextRightEdge < (brick.getX() + brick.getWidth())) & (nextTopEdge > brick.getY()) & (nextTopEdge < (brick.getY() + brick.getHeight()))) {
                            if (currentRightEdge = brick.getX()) {
                                do ball.setDx(inverseDx);
                            }
                            if (currentTopEdge = (brick.getY() + brick.getHeight())) {
                                do ball.setDy(inverseDy);
                            }
                            do brick.hide();
                            do brick.setVisible(false);
                            let break = true;
                            do breakBrick();
                        }
                    }
                } else {
                    if (ball.getDy() > 0) {
                        if ((nextLeftEdge > brick.getX()) & (nextLeftEdge < (brick.getX() + brick.getWidth())) & (nextBottomEdge > brick.getY()) & (nextBottomEdge < (brick.getY() + brick.getHeight()))) {
                            if (currentLeftEdge = (brick.getX() + brick.getWidth())) {
                                do ball.setDx(inverseDx);
                            }
                            if (currentBottomEdge = brick.getY()) {
                                do ball.setDy(inverseDy);
                            }
                            do brick.hide();
                            do brick.setVisible(false);
                            let break = true;
                            do breakBrick();
                        }
                    } else {
                        if ((nextLeftEdge > brick.getX()) & (nextLeftEdge < (brick.getX() + brick.getWidth())) & (nextTopEdge > brick.getY()) & (nextTopEdge < (brick.getY() + brick.getHeight()))) {
                            if (currentLeftEdge = (brick.getX() + brick.getWidth())) {
                                do ball.setDx(inverseDx);
                            }
                            if (currentTopEdge = (brick.getY() + brick.getHeight())) {
                                do ball.setDy(inverseDy);
                            }
                            do brick.hide();
                            do brick.setVisible(false);
                            let break = true;
                            do breakBrick();
                        }
                    }
                }
            }
            let i = i + 1;
        }

        do ball.move();
        return;
    }

}