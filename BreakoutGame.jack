/**
 * Represents a Breakout game.
 */
class BreakoutGame {

    field Ball ball;
    field Paddle paddle;
    field int columnCount, rowCount, bricksCount;
    //field Array bricks;
    field int score, lives;
    field boolean exit;

    /** Constructs a new Breakout Game */
    constructor BreakoutGame new() {
        do Screen.clearScreen();
        let ball = Ball.new(252, 222, 3, -3, 3);
        let paddle = Paddle.new(230, 229, 50, 7, 3);
        let columnCount = 5;
        let rowCount = 3;
        let bricksCount = columnCount * rowCount;
        //do createBricks();
        do drawInformationBoard();
        do updateScore(0);
        do updateLives(3);
        let exit = false;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do ball.dispose();
        do padle.dispose();
        /*
        var int i;
        let i = 0;
        while (i < numberOfBricks) {
            do bricks[i].dispose();
            let i = i + 1;
        }
        do bricks.dispose();
        */
        do Memory.deAlloc(this);
        return;
    }

    /** Draws bottom separator and Score/Lives labels */
    method void drawInformationBoard() {
        do Screen.drawRectangle(0, 238, 511, 240);
	    do Output.moveCursor(22,0);
	    do Output.printString("Score:");
        do Output.moveCursor(22,56);
	    do Output.printString("Lives:");
        return;
    }

    /** Updates score */
    method void updateScore(int newScore) {
        let score = newScore;
        do Output.moveCursor(22,7);
        do Output.printInt(newScore);
        return;
    }

    /** Updates remaining lives */
    method void updateLives(int newLives) {
        let lives = newLives;
        do Output.moveCursor(22,63);
        do Output.printInt(newLives);
        return;
    }

    /** Creates bricks */
    /* method void createBricks() {
        let bricks = Array.new(numberOfBricks);
        var int i;
        let i = 0;
        while (i < numberOfBricks) {
            bricks[i] = Brick.new(0, 0, 30, 8); // TODO: Adjust size and location
            let i = i + 1;
        }
        return;
    } */

    /** Starts the game and handles the input from user. */
    method void run() {
        var char key;  // the key currently pressed by the user
        //var boolean exit;
        //let exit = false;
      
        while (~exit) {
            let key = Keyboard.keyPressed();
            if (key = 81)  { let exit = true; }        // q key
            if (key = 130) { do movePaddleLeft(); }    // left arrow
            if (key = 132) { do movePaddleRight(); }   // right arrow
            //do moveBall();
            do Sys.wait(5);
        }
        return;
    }

    method void movePaddleRight() {
        if ((paddle.getX() + paddle.getWidth() + paddle.getDx()) < 512) {
            do paddle.moveRight();
        }
        return;
    }

    method void movePaddleLeft() {
        if ((paddle.getX() - paddle.getDx()) > 0) {
            do paddle.moveLeft();
        }
        return;
    }

    /*
    method void moveBall() {
        var int nextLeftEdge;
        var int nextRightEdge;
        var int nextTopEdge;
        var int nextBottomEdge;
        var boolean onPaddle;
        let nextLeftEdge = ball.getX() + ball.getDx() - ball.getRadius();
        let nextRightEdge = ball.getX() + ball.getDx() + ball.getRadius();
        let nextTopEdge = ball.getY() + ball.getDy() - ball.getRadius();
        let nextBottomEdge = ball.getY() + ball.getDy() + ball.getRadius();
        let onPaddle = (ball.getX() > paddle.getX()) & (ball.getX() < (paddle.getX() + paddle.getWidth()))
        
        if (nextRightEdge > 511) {
            do ball.setDx(-ball.getDx());
        } else if (nextLeftEdge < 0) {
            do ball.setDx(-ball.getDx());
        } else if (nextTopEdge < 0) {
            do ball.setDy(-ball.getDy());
        } else if (onPaddle & (nextBottomEdge > paddle.getY())) {
            do ball.setDy(-ball.getDy());
        } else if (nextBottomEdge > 237) {
            let exit = true;
        }

        do ball.move();
        return;
    }
    */

}